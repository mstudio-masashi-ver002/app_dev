name: Issue to PR via Codex

on:
  issues:
    types:
      - opened
      - labeled

concurrency:
  group: codex-issue-${{ github.event.issue.number }}
  cancel-in-progress: false

jobs:
  resolve:
    if: ${{ contains(github.event.issue.labels.*.name, 'codex') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Node.js のセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Codex CLI のインストール
        run: npm install -g @openai/codex

      - name: Git 設定
        run: |
          git config user.name "codex-bot"
          git config user.email "codex-bot@users.noreply.github.com"

      - name: Codex にログイン
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ -z "${OPENAI_API_KEY}" ]; then
            echo "OPENAI_API_KEY が設定されていません" >&2
            exit 1
          fi
          codex login --api-key "${OPENAI_API_KEY}"

      - name: Codex で修正案を生成
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          set -euxo pipefail
          BRANCH="codex/issue-${ISSUE_NUMBER}"
          git checkout -b "${BRANCH}"

          cat <<'PROMPT' > codex-prompt-template.md
You are part of an automated workflow that fixes GitHub Issue #${ISSUE_NUMBER} in this Next.js task manager project.

Repository notes:
- The project uses npm scripts: npm run dev, npm run lint, npm run build.
- Only modify files relevant to the issue. Keep changes minimal and well-structured.
- Update or add tests and type definitions when necessary.

Task details (provided by the issue author):
Title: ${ISSUE_TITLE}
Body:
${ISSUE_BODY}

Instructions:
1. Understand the issue and propose precise code changes that resolve it.
2. Apply changes directly in the repository without creating commits.
3. Run any essential checks mentioned in the Issue (e.g. npm run lint / npm run build) when feasible.
4. Finish by printing a short summary and list of checks you ran.
PROMPT

          envsubst < codex-prompt-template.md > codex-prompt.md
          rm codex-prompt-template.md

          codex exec --full-auto -C . - < codex-prompt.md

      - name: コミット作成
        id: commit
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          set -euo pipefail
          if [ -z "$(git status --porcelain)" ]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          git add -A
          git commit -m "Codex: Resolve issue #${ISSUE_NUMBER}"
          echo "skip=false" >> "$GITHUB_OUTPUT"

      - name: ブランチをプッシュ
        if: ${{ steps.commit.outputs.skip != 'true' }}
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO: ${{ github.repository }}
          TOKEN: ${{ secrets.PAT_TOKEN != '' && secrets.PAT_TOKEN || github.token }}
        run: |
          set -euo pipefail
          BRANCH="codex/issue-${ISSUE_NUMBER}"
          git push "https://${TOKEN}@github.com/${REPO}.git" "HEAD:${BRANCH}" --force-with-lease

      - name: Pull Request 作成
        if: ${{ steps.commit.outputs.skip != 'true' }}
        id: pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN != '' && secrets.PAT_TOKEN || github.token }}
          script: |
            const issue = context.payload.issue;
            const branch = `codex/issue-${issue.number}`;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const base = context.payload.repository.default_branch;

            const existing = await github.rest.pulls.list({
              owner,
              repo,
              head: `${owner}:${branch}`,
              state: 'open'
            });

            if (existing.data.length > 0) {
              core.setOutput('pr_url', existing.data[0].html_url);
              return;
            }

            const title = `[Codex] ${issue.title}`;
            const body = `自動生成された修正です。\n\n- 対象 Issue: #${issue.number}\n- この PR は Codex CLI により作成されました。\n\nCloses #${issue.number}`;

            const pr = await github.rest.pulls.create({
              owner,
              repo,
              title,
              head: branch,
              base,
              body
            });

            core.setOutput('pr_url', pr.data.html_url);

      - name: Issue に結果をコメント
        if: ${{ steps.commit.outputs.skip != 'true' }}
        uses: actions/github-script@v7
        env:
          PR_URL: ${{ steps.pr.outputs.pr_url }}
        with:
          github-token: ${{ secrets.PAT_TOKEN != '' && secrets.PAT_TOKEN || github.token }}
          script: |
            const issue = context.payload.issue;
            const prUrl = process.env.PR_URL;
            const message = prUrl
              ? `Codex により自動生成された PR が作成されました: ${prUrl}`
              : 'Codex により PR が更新されました。';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: message
            });

      - name: 変更なし時のコメント
        if: ${{ steps.commit.outputs.skip == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN != '' && secrets.PAT_TOKEN || github.token }}
          script: |
            const issue = context.payload.issue;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: 'Codex は実施しましたが変更は不要と判断されました。Issue 内容をご確認ください。'
            });
