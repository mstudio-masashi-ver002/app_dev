name: Issue to PR with Codex

on:
  issues:
    types: [labeled]

jobs:
  fix_with_codex:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'codex'

    permissions:
      contents: write
      pull-requests: write
      actions: write

    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
        shell: bash

      - name: Ensure required secrets are configured
        run: |
          set -euo pipefail

          if [ -z "${OPENAI_API_KEY:-}" ]; then
            echo "::error::OPENAI_API_KEY secret is not configured. Add it in repository settings to allow Codex to run." >&2
            exit 1
          fi
        shell: bash

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install Codex CLI
        run: npm install -g @openai/codex

      - name: Generate patch with Codex
        id: codex_patch
        env:
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          set -euo pipefail

          BRANCH="codex/issue-${ISSUE_NUMBER}"
          git switch -c "$BRANCH"

          PROMPT="$(printf '%s\n\n%s\n%s\n' \
            "$ISSUE_TITLE" \
            "$ISSUE_BODY" \
            "最後に\`npm ci && npm run build\`を実行してエラーが出ないことを確認してください。 .gitのような'.'から始まるファイル、フォルダの中身は絶対に変更しないでください。"
          )"

          codex exec --full-auto --color never "$PROMPT"

          if [[ -z $(git status --porcelain) ]]; then
            echo "::notice::Codex did not produce any changes; skipping push and PR creation." >&2
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "has_changes=true" >> "$GITHUB_OUTPUT"

          git add .
          git commit -m "Fix: #${ISSUE_NUMBER} - ${ISSUE_TITLE}"
          git push -u origin "$BRANCH"
        shell: bash

      - name: Create Pull Request
        if: steps.codex_patch.outputs.has_changes == 'true'
        env:
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          DEFAULT_GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          BRANCH="codex/issue-${ISSUE_NUMBER}"
          TITLE="Fix: #${ISSUE_NUMBER} – ${ISSUE_TITLE}"
          BODY="Automated fix generated by Codex CLI."

          if [ -n "${PAT_TOKEN:-}" ]; then
            export GH_TOKEN="$PAT_TOKEN"
          else
            export GH_TOKEN="$DEFAULT_GITHUB_TOKEN"
          fi

          if [ -z "${GH_TOKEN:-}" ]; then
            echo "::warning::No token available for PR creation. Please configure PAT_TOKEN or allow github.token." >&2
            exit 0
          fi

          if ! gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            "repos/${GITHUB_REPOSITORY}/pulls" \
            -f title="$TITLE" \
            -f head="$BRANCH" \
            -f base="main" \
            -f body="$BODY" >/tmp/pr-response.json; then
            echo "::warning::Automatic PR creation failed. Ensure PAT_TOKEN has repo scope or create the PR manually." >&2
            exit 0
          fi

          PR_URL=$(jq -r '.html_url // empty' /tmp/pr-response.json)
          if [ -n "$PR_URL" ]; then
            echo "::notice::Pull request created: $PR_URL"
          fi
        shell: bash
